March 21

Weighted JS (version 2)
w(0) = 0
for (i=1, ..., n){
	w(i) = max{ w(j)t(j,i) } <-- where t(j,i) is 1 if ij are compatable, else 0
			 j in {0,...,i-1}
}
w(n+1) = max { w(j)t(j, n+1) }
			j in {0,...,n}

Theorem: The algorithm (v2) returns the optimal solution.
Proof: (the strategy is proof by induction)
We first show that w(i) corresponds to the weight of the best path up to and including interval i.  This directly implies that w(n+1) is the weight of the overall best solution.  We then show that the traceback procedure recovers the underlying set of intervals.

(1) Proof by induction:
j=0, w(0) = 0 is the weight of the best path starting at interval 0 and ending at interval 0 (which has a weight of 0).

Suppose that w(i) corresponds to the weight of the best path up to and including interval i.  When we calculate w(i+1) via:
	w(i+1) = max{ w(j)t(j,i+1) } + v(i+1)
				j in {0,...,i}
	we know that the max operation will select the interval j in {0,...,i} that:
		is compatable with interval i+1, ie t(j, i+1) = 1
		and has the highest value w(j)

we already know that the weights w(0) to w(i) correspond to the weight of the best path up to that respective interval.
By adding the weight of the current interval, v(i+1), we therefore obtain the weight of the best path from interval 0 to (i+1).  
Note: for i=n, we do not need to add weight v(n+1), as it is 0.



Weighted JS (version 2) - traceback only
T = {}
last_i = argmax{ w(j)t(j, n+1) }
			j in {0...n}
while ( last_i > 0){
	add last_i to set T
	last_i = argmax{ w(j)t(j, last_i)}
				j in {0...lasti-1}
}
return T

(2) We know that w(n+1) corresponds to the weight of the optimal path.  In order to retrieve the corresponding path, we start at interval n+1 (END interval) and proceed via intervals that were selected in the max-operation of the for loop. until we reach the start interval 0.
w(n+1) arrives from the interval j in {0...n} that maximizes w(j)t(j,n+1).  This is equal to the first value of last_i (*).  When we are at interval last_i, we know that the previous interval j is the interval j in {0,...,lasti-1} that maximizes w(j)t(j,last_i).
We  therefore set the new value of last_i to argmax{ w(i)t(j,last_i)}, add last_i to return set T and continue until we reach the START interval 0.

7.2 Example 2 Segmented Least-Square Problem
============================================

Problem Setting: Given a set S of n points in 2 dimensions, determine the linear fit to these points that minimizes the overal distance to all n points.

Definitions: S = {p1, p2, ..., pn}, where the points pi = (xi, yi) have indicies such that x1 < x2 < ... < xn. where |S| = n.

a line in 2d is defined via a function l(x) = y = ax + b.  We call a the slope of the line and b the intersection wiht the y axis.

the distance between a line l and a set of points S is defined as:
	e(l,s) = SUM_1 to n ( y-l(x) )^2 = SUM_1 to n ( yi - (axi + b ))^2 = SUM_1 to n (yi - axi - b)^2 

Goal: Given a set S, |S| = n , find values a and b in R such that e(l,S) is minimized for the corresponding line l defined by a and b.

Solution (calculus) Interpret e(l,s) as function g(a,b) (as s is kept fixed)
Set the partial derivatives wrt to a and b = 0 and use the resulting to equations to derive a and b.

... maths skipped ...


a = n SUM_1 to n (xiyi - (SUM_1 to n xi)(SUM_1 to n yi))/(n* SUM_1 to n xi^2 - (SUM_1 to n xi)^2)

b = (SUM_1 to n yi - a SUM_1 to n xi) n

-> these valeus define the correspoding line unambigugously, this is the line that minimizes e(l,s).

Definitions: a partition of P into N segments is a decomposition of set P = {p1, ..., pn} (with x1< x2 <... <xn as before) into N sub-segments S_i i in {0...N} such that:
	UNION Si = P, Si =/= {}, Si INTERSECT Sj = {} for any i =/= j
	and Si = {P_s(1), ..., P_e(1)} with s(i) <= e(i)

	and where e(i-1) + 1 = s(i) and e(i) + 1 = s(i+1)

	Example. P = {p1, ..., p_15}
	get parition:
		S_1 = {p1, p2, p3} s(1) = 1, e(1) = 3
		S_2 = {p4, p5}	   s(2) = 4, e(2) = 5
		S_3 = {p6,...,p15} s(3) = 6, e(3) = 15


	e_ij = minimal error e(l,s) for the optimal line l(x) through points {pi,...,pj} i<j

	Definitions P(S1,...,SN) the penalty for a given partition of P into segments S1,..., SN
		= SUM_1...N ( e_s(1)e(1) + c)  where c in R is the penalty per segment

	Goal: Given a set P of n points, find the optimal partition into segments that maximizes the overall penalty defined above, keep chosen value of C fixed.

	key observations:
		Suppose M(i) corresponds to the minimum penalty up to and including pi.  Suppose we know the values of M(1) to M(i-1).  

		M(i) = min{ M(j-1) + e_ij + c }
				j in {0...i}

	Segmented least squares algorithm (P,n)
	- calculate a nxn maxtrix E:
		for (i=0...n) {
			for (j=0...i) {
				calculate eji
			}
		}

		eji is the minimum penalty fit for a single line to points pj,...,pi

M[0] = 0
for (i=0...n){ M[i] = min {M[j-1]+eji+c} }

traceback T = {}
last_i = argmin{ M[j-1] + ejn + c }  segment p_lasti to pn
			j in {0...n}

while ( lasti > 0){
	move lasti to T
	lasti = argmin{ M[j-1]+ejlasti-1 + c }    segment p lasti to lasti-1)
				j in {0...lasti-1}

return T and |T| = N (ie boundry indicies of all segments and their number)

Observations: M[n] contains overall penalty

Time requirements:
	calculate E-maxtrix, n^2 values eji each of which require O(n) time to calculate
	-> O(n^3) time

	recursion O(n^2)
	traceback O(n^2)
	overall the algorithm is O(n^3) time.